{"version":3,"sources":["img/slackproject.png","img/dicegame.png","components/Welcome.js","components/ProjectBox.js","components/Work.js","components/Contact.js","components/NavBar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Welcome","className","Component","ProjectBox","props","id","title","src","pic","alt","type","text","href","liveLink","class","gitLink","Work","state","projects","r1","r2","allProjects","this","map","project","index","key","Contact","NavBar","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6FAAAA,EAAOC,QAAU,IAA0B,0C,kBCA3CD,EAAOC,QAAU,IAA0B,sC,4NCc5BC,E,uKATP,OACA,yBAAKC,UAAU,aACb,yCACA,iD,GANYC,aC0BPC,G,MAzBI,SAACC,GAChB,OACI,6BACI,yBAAKC,GAAG,eACJ,yBAAKA,GAAG,SACJ,2BAAID,EAAME,QAEd,yBAAKD,GAAG,SACJ,yBAAKA,GAAG,MAAME,IAAKH,EAAMI,IAAKC,IAAI,cACtC,6BACI,uBAAGJ,GAAG,QAAQD,EAAMM,MACpB,uBAAGL,GAAG,QAAQD,EAAMO,OAExB,yBAAKN,GAAG,aACJ,0BAAMJ,UAAU,eACZ,uBAAGW,KAAMR,EAAMS,UAAU,uBAAGC,MAAM,iBAAlC,UAEJ,0BAAMb,UAAU,eACZ,uBAAGW,KAAMR,EAAMW,SAAS,uBAAGD,MAAM,kBAAjC,kB,wCC4BTE,E,4MAzCbC,MAAQ,CACNC,SAAU,CACV,CACEZ,MAAO,cACPE,IAAKW,IAAIT,KAAM,QACfC,KAAM,8EACNE,SAAU,2CACVE,QAAS,4CAEX,CACET,MAAO,YACPE,IAAKY,IAAIV,KAAM,SACfC,KAAM,mDACNE,SAAU,IACVE,QAAS,yCAEX,CACET,MAAO,YACPE,IAAKW,IAAIT,KAAM,SACfC,KAAM,8EACNE,SAAU,IACVE,QAAS,O,uDAMT,IAAIM,EAAcC,KAAKL,MAAMC,SAASK,KAAI,SAACC,EAASC,GAClD,OAAO,kBAAC,EAAD,CAAYC,IAAOD,EAAOnB,MAASkB,EAAQlB,MAAOE,IAAOgB,EAAQhB,IAAKE,KAAQc,EAAQd,KAAMC,KAAQa,EAAQb,KAAME,SAAYW,EAAQX,SAAUE,QAAWS,EAAQT,aAE1K,OACA,yBAAKd,UAAU,aACb,wCACA,kBAAC,IAAD,CAAiBA,UAAU,kBAC3B,yBAAKI,GAAG,cAAcgB,S,GApCbnB,aCOJyB,E,uKARP,OACA,yBAAK1B,UAAU,aACb,4C,GALYC,aCoBP0B,G,6KAhBP,OACA,6BACE,yBAAKvB,GAAG,kBACN,yBAAKA,GAAG,SACN,uBAAGO,KAAK,YAAR,WADF,IAGE,uBAAGA,KAAK,SAAR,QAHF,IAKE,uBAAGA,KAAK,YAAR,kB,GAXOV,c,MCiBN2B,MAbf,WACE,OACE,yBAAK5B,UAAU,OACb,yBAAKI,GAAG,UACN,kBAAC,EAAD,OAEF,uBAAGA,GAAG,WAAU,kBAAE,EAAF,OAChB,uBAAGA,GAAG,QAAO,kBAAE,EAAF,OACb,uBAAGA,GAAG,WAAU,kBAAE,EAAF,SCHFyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f9694630.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/slackproject.39e6b3dd.png\";","module.exports = __webpack_public_path__ + \"static/media/dicegame.46f81b3d.png\";","import React, { Component} from 'react';\n\nclass Welcome extends Component {\n\n    render (){\n        return (\n        <div className=\"AppHeader\">\n          <h1>Portfolio</h1>\n          <h3>Robert Marsh</h3>\n        </div>\n      );\n    }\n}\n\nexport default Welcome;\n","import React from 'react';\nimport './ProjectBox.css';\n\nconst ProjectBox = (props) => {\n    return (\n        <div>\n            <div id=\"pBContainer\">\n                <div id=\"title\">\n                    <p>{props.title}</p>\n                    </div>\n                <div id=\"image\">\n                    <img id=\"pic\" src={props.pic} alt=\"user pic\"/></div>\n                <div>\n                    <p id=\"type\">{props.type}</p>\n                    <p id=\"text\">{props.text}</p>\n                </div>\n                <div id=\"cardLinks\">\n                    <span className=\"linkButtons\">\n                        <a href={props.liveLink}><i class=\"fas fa-globe\"></i> Live</a>\n                        </span>\n                    <span className=\"linkButtons\">\n                        <a href={props.gitLink}><i class=\"fab fa-github\" ></i> Git Hub</a>\n                    </span>\n                </div>\n            </div>\n        </div>\n    )\n}\nexport default ProjectBox","import React, { Component} from 'react';\nimport ProjectBox from './ProjectBox';\nimport r1 from '../img/slackproject.png';\nimport r2 from '../img/dicegame.png'\nimport ScrollContainer from 'react-indiana-drag-scroll';\n\nclass Work extends Component {\n  \n  state = {\n    projects: [\n    {\n      title: \"Slack Clone\",\n      pic: r1, type: \"React\",\n      text: \"A group project to recreate the look and feel of the Slack chat application\",\n      liveLink: \"https://jinxbunny.github.io/group_slack/\",\n      gitLink: \"https://github.com/jinxbunny/group_slack\"\n    },\n    {\n      title: \"Dice Game\", \n      pic: r2, type: \"JS DOM\",\n      text: \"Mini game project using Javascript, HTML and CSS\",\n      liveLink: \"#\",\n      gitLink: \"https://github.com/jinxbunny/dicegame\"\n    },\n    {\n      title: \"Cyber Pet\",\n      pic: r1, type: \"JS DOM\",\n      text: \"A group project to recreate the look and feel of the Slack chat application\",\n      liveLink: \"#\",\n      gitLink: \"#\"\n    },\n  ]\n  }\n\n    render (){\n      let allProjects = this.state.projects.map((project, index) => {\n        return <ProjectBox key = {index} title = {project.title} pic = {project.pic} type = {project.type} text = {project.text} liveLink = {project.liveLink} gitLink = {project.gitLink}/>\n      })\n        return (\n        <div className=\"AppHeader\">\n          <h1>Projects</h1>\n          <ScrollContainer className=\"swipeContainer\">\n          <div id=\"projectBox\">{allProjects}</div>\n          </ScrollContainer>\n        </div>\n      );\n    }\n}\n\nexport default Work;\n","import React, { Component} from 'react';\n\nclass Contact extends Component {\n\n    render (){\n        return (\n        <div className=\"AppHeader\">\n          <h1>Contact</h1>\n        </div>\n      );\n    }\n}\n\nexport default Contact;\n","import React, { Component} from 'react';\nimport './NavBar.css'\n\nclass NavBar extends Component {\n\n    render (){\n        return (\n        <div>\n          <div id=\"linksContainer\">\n            <div id=\"links\">\n              <a href=\"#welcome\">Welcome</a>\n              |\n              <a href=\"#work\">Work</a>\n              |\n              <a href=\"#contact\">Contact</a>\n            </div>\n          </div>\n        </div>\n      );\n    }\n}\n\nexport default NavBar;\n","import React from 'react';\nimport Welcome from './components/Welcome'\nimport Work from './components/Work'\nimport Contact from './components/Contact'\nimport NavBar from './components/NavBar.js'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div id=\"navBar\">\n        <NavBar />\n      </div>\n      <a id=\"welcome\">< Welcome /></a>\n      <a id=\"work\">< Work /></a>\n      <a id=\"contact\">< Contact /></a>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}